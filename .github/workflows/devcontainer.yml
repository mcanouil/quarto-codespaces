name: "Build: Docker Images"

on:
  workflow_dispatch:
  release:
    types: [published]
  schedule:
    - cron: "0 6 * * sun"
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build - Quarto ${{ matrix.QUARTO_VERSION }} (${{ matrix.IMAGE }})
    strategy:
      matrix:
        include:
          - QUARTO_VERSION: release
            IMAGE_TAG: release,release-jammy,latest
            IMAGE: buildpack-deps:jammy-curl
            USER: vscode
          - QUARTO_VERSION: prerelease
            IMAGE_TAG: prerelease,prerelease-jammy
            IMAGE: buildpack-deps:jammy-curl
            USER: vscode
          # - QUARTO_VERSION: release
          #   IMAGE_TAG: release-universal
          #   IMAGE: mcr.microsoft.com/devcontainers/universal:latest
          #   USER: codespace
          # - QUARTO_VERSION: prerelease
          #   IMAGE_TAG: prerelease-universal
          #   IMAGE: mcr.microsoft.com/devcontainers/universal:latest
          #   USER: codespace
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU for multi-architecture builds
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker buildx for multi-architecture builds
        uses: docker/setup-buildx-action@v3
        with:
          use: true

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and run Dev Container on release
        uses: devcontainers/ci@v0.3
        with:
          subFolder: .github
          imageName: ghcr.io/${{ github.repository }}
          cacheFrom: ghcr.io/${{ github.repository }}
          noCache: ${{ github.event_name == 'release' || github.event_name == 'workflow_dispatch' }}
          imageTag: ${{ matrix.IMAGE_TAG }}
          push: ${{ github.event_name == 'release' || github.event_name == 'workflow_dispatch' && 'always' || 'never' }}
          platform: linux/amd64,linux/arm64
        env:
          IMAGE: ${{ matrix.IMAGE }}
          QUARTO_VERSION: ${{ matrix.QUARTO_VERSION }}
          USER: ${{ matrix.USER }}

  build-versions:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'release' || github.event_name == 'workflow_dispatch' }}
    needs:
      - "build"
    name: Build - Quarto ${{ matrix.QUARTO_VERSION }}
    strategy:
      matrix:
        PLATFORM:
          - "linux/amd64,linux/arm64"
        QUARTO_VERSION:
          - "1.0"
          - "1.1"
          - "1.2"
          - "1.3"
          - "1.4"
          - "1.5"
          - "1.6"
          - "1.7"
        include:
          - QUARTO_VERSION: "1.0"
            PLATFORM: "linux/amd64"
          - QUARTO_VERSION: "1.1"
            PLATFORM: "linux/amd64"
          - QUARTO_VERSION: "1.2"
            PLATFORM: "linux/amd64"
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU for multi-architecture builds
        uses: docker/setup-qemu-action@v3
      - name: Setup Docker buildx for multi-architecture builds
        uses: docker/setup-buildx-action@v3
        with:
          use: true
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and run Dev Container on release
        uses: devcontainers/ci@v0.3
        with:
          imageName: ghcr.io/${{ github.repository }}
          cacheFrom: ghcr.io/${{ github.repository }}
          noCache: ${{ github.event_name == 'release' || github.event_name == 'workflow_dispatch' }}
          imageTag: ${{ matrix.QUARTO_VERSION }},${{ matrix.QUARTO_VERSION }}-jammy
          push: always
          platform: ${{ matrix.PLATFORM }}
          # platform: linux/amd64,linux/arm64
          configFile: ${{ format('.devcontainer/mcanouil-{0}/devcontainer.json', matrix.QUARTO_VERSION) }}
            
  clean:
    needs:
      - "build"
      - "build-versions"
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Delete obsolete/untagged versions
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ github.event.repository.name }}
          package-type: "container"
          token: ${{ secrets.GITHUB_TOKEN }}
          delete-only-untagged-versions: "true"
